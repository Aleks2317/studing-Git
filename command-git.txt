git add '*.txt' — добавить только файлы, соответствующие указанному
выражению

git add --patch filename — позволяет выбрать какие изменения из файла
добавятся в коммит

git reset [file] — убрать файлы из индекса коммита (изменения не теряются)

git diff --staged — показать, что было добавленно в индекс с помощью git
add, но еще не было закоммиченно

git rm --cached имя_файла - чтобы Git перестал отслеживать файл, но он остался на диске

git rm [file] — удалить файл из рабочей директории и добавить в индекс
информацию об удалении

git mv [file-original] [file-renamed] — изменить имя файла и добавить в
индекс коммита

git status - проверить текущее состояние репозитория

git status -s - сделать вид изменений более кратким

git commit –m “комментарий”

git commit --amend — добавить изменения к последнему коммиту

git remote add origin https:<path>.git - добавляет информацию о связи между удаленным
репозиторием с псевдонимом origin с локальным

git branch -M main - переименовывает ветку master на локальном репозитории в main.

git push -u origin main -  (отправить) локальный репозиторий на сервер.

git log - историю коммитов

git log -p - подробно изучить изменения, внесенные в каждый файл

git log --oneline - вывод более удобным для чтения

git log --author=“user_name” - позволяет увидеть сообщения конкретного автора

git log --graph - Просмотреть историю коммитов в виде графика для текущей ветки

git log --graph --oneline --decorate  - упрощает понимание того, к какой ветке относится каждый коммит

git log --all --graph --oneline --decorate - Для просмотра истории коммитов по всем веткам используется флаг --all

git log –n количество - получить заданное количество записей

git log --grep=“комментарий” - поиск по сообщению комментари

git log --since=1.month.ago --until=1.weeks.ago - поиск по дате

Параметры поиска можно сочетать, например, сделать поиск по дате и
автору

git diff HEAD — показать, что изменилось с последнего коммита.

git diff HEAD^ — показать, что изменилось с предпоследнего коммита.

git diff [branch] — сравнить текущую ветку с заданной.

git diff --stat — показать статистику какие файлы были изменены и как

git log --follow [file] — список изменения текущего файла, включая переименования

Опция --pretty меняет формат вывода:
git log --pretty=oneline — выводит каждый коммит в одну строку

git log --pretty=format:"%h %s" --graph — изменение вида отображения истории изменений

git log --author='Name' --after={1.week.ago} --pretty=oneline --abbrev-commit
— посмотреть над чем работал заданный пользователь последнюю неделю
git log --no-merges master.. — посмотреть историю изменений только для
текущей ветки
git show [commit] — показать метадату и изменения в заданном коммите
git show [branch]:[file] — посмотреть на файл в другой ветке, не
переключаясь на неё
git log --stat — показывает сокращённую статистику для коммитов,
например изменённые файлы и количество добавленных/удалённых строк в
каждом их них
git log -S имя_функции — позволяет посмотреть добавление/удаление функции

Работа с ветками

git branch имя_ветки - Создать ветку

git checkout <имя ветки> - Переключиться на свежесозданную ветку

git checkout -b <имя ветки> - создать новую ветку и сразу перейти в нее

git branch -m <oldname> <newname>  - переименовать

git checkout -b <name> <remote>/<branch> — переключиться на удаленную ветку

git checkout [filename] — вернуть файл в первоначальное состояние, если он
еще не был добавлен в индекс коммита

git branch -d <имя ветки> - Удаление веток

Клонирование (загрузка)

git clone [url] - Клонирование (загрузка) репозитория

git clone --mirror - Клонируйте репозиторий, но без возможности редактировать какиелибо файлы

git clone https://github.com/vvv7220/LearnWeb --branch photoshop --single-branch  - клонировать только одну ветвь

git clone --sparse -  клонирование файлов только корневого каталога.

Слияние веток и получение изменений

git fetch - получить изменения


git fetch <репозиторий> – извлечение всех веток из репозитория, коммитов и файлов

git fetch <репозиторий> <ветка> – данные извлекаются из указанной ветки

git fetch --all – извлекает все зарегистрированные удаленные репозитории и их ветки

git fetch --dry-run – выполняет демонстрационный прогон команды

После загрузки изменений можно делать слияние

git merge <название сливаемой ветки> - для реализации слияния

Проверим команды:

git branch --merged main – показывает ветки, объединенные с указанной веткой

git branch --no-merged – перечисляет ветки, которые не были объединены



Работа в удаленном репозитории

git pull <репозиторий> – получает изменения из удаленного репозитория и
обновляет рабочую копию в соответствие с удаленным репозиторием

git push <репозиторий> <ветка> - загружает изменения в удаленный репозиторий



